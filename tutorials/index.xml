<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tutorials on Farmer</title><link>https://compositionalit.github.io/farmer/tutorials/</link><description>Recent content in Tutorials on Farmer</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Sat, 24 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://compositionalit.github.io/farmer/tutorials/index.xml" rel="self" type="application/rss+xml"/><item><title>Traditional Enterprise Application to the Azure Cloud, managed via Farmer</title><link>https://compositionalit.github.io/farmer/tutorials/traditional-ea/</link><pubDate>Fri, 03 Sep 2021 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/tutorials/traditional-ea/</guid><description>Introduction This tutorial shows how to create the basic infrastructure of an enterprise application (for example, migrating old on-premises applications to the cloud) and then how to build the supporting services for that.
A traditional enterprise application has a database and a server. Farmer supports both Microsoft SQL Server and PostgreSQL. This tutorial uses the Microsoft version. For the server, we use a Virtual Machine (VM), which is basically your server in the cloud.</description></item><item><title>Deploy an ASP.NET app</title><link>https://compositionalit.github.io/farmer/tutorials/webapp-deploy/</link><pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/tutorials/webapp-deploy/</guid><description>Introduction This tutorial shows how to create the infrastructure required to host a ASP.NET web app, and how to automatically deploy that application with Farmer. We&amp;rsquo;ll cover the following steps:
Creating and configuring a basic ASP.NET web application. Creating a web app in Farmer. Deploying the web app through Farmer. Full code available here
Note: Your web application can be a C# web application - it does not need to be written in F#!</description></item><item><title>Custom Output with ARM Expressions</title><link>https://compositionalit.github.io/farmer/tutorials/custom-output/</link><pubDate>Fri, 23 Apr 2021 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/tutorials/custom-output/</guid><description>Introduction Many resources have properties that are only set once the resource is created, such as a public IP&amp;rsquo;s address or an ExpressRoute&amp;rsquo;s circuit service key. It is often helpful to have these as output from the deployment so they are available to any downstream automation tasks.
In this tutorial, you will deploy an ExpressRoute circuit, create a reference to the serviceKey property on the newly deployed circuit, and provide that as the ARM deployment output.</description></item><item><title>Declarative Steps in an ARM Deployment</title><link>https://compositionalit.github.io/farmer/tutorials/keyvault-certs/</link><pubDate>Thu, 25 Feb 2021 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/tutorials/keyvault-certs/</guid><description>Introduction An ARM deployment typically represents the infrastructure you want deployed as a result of it, referred to as the &amp;ldquo;goal state&amp;rdquo;. For instance, you may want to have a web application with a database, so you&amp;rsquo;ll define your goal state that includes database and web application resources. However, it&amp;rsquo;s not always that simple - there are various reasons that some of the steps of a deployment cannot be represented by the goal state resource model.</description></item><item><title>Create your own Minecraft Server</title><link>https://compositionalit.github.io/farmer/tutorials/minecraft-server-aci/</link><pubDate>Sat, 13 Feb 2021 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/tutorials/minecraft-server-aci/</guid><description>Introduction In this tutorial, you&amp;rsquo;ll use dotnet framework features and F# language techniques when building a template to create a fully functional Minecraft Server running on an Azure Container Instance with its world data stored in an Azure Storage Account. Because Farmer is a domain specific language embedded within F#, you are able to utilize the rich dotnet ecosystem and a static type system to &amp;ldquo;craft&amp;rdquo; an advanced deployment.
Programmatically build our Minecraft configuration files.</description></item><item><title>F# Script in a Container Group</title><link>https://compositionalit.github.io/farmer/tutorials/aci-fsx/</link><pubDate>Wed, 10 Feb 2021 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/tutorials/aci-fsx/</guid><description>Introduction In this tutorial, you will deploy an F# script directly to an Azure Container Group. This is useful when you need to fill a gap in your solution with some quick application logic or to test scenarios on Azure before building a more complex application. We&amp;rsquo;ll cover the following steps:
Create a brief F# script. Create a container instance. Include the script on a volume that will be attached to the container when started.</description></item><item><title>Cosmos-backed Web App</title><link>https://compositionalit.github.io/farmer/tutorials/cosmos-backed-webapp/</link><pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/tutorials/cosmos-backed-webapp/</guid><description>Introduction This tutorial walks you through creating a web application which is backed by a Cosmos DB database, and is fully configured with connection string settings for you to start developing against. We&amp;rsquo;ll cover the following steps:
Creating a Cosmos DB account with a single database. Creating a web application with an automatically configured app insights instance. Configuring the web application to have the connection settings required to connect to the Cosmos DB instance.</description></item><item><title>Multiple web apps</title><link>https://compositionalit.github.io/farmer/tutorials/multiple-web-apps/</link><pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/tutorials/multiple-web-apps/</guid><description>Introduction This tutorial walks you through creating multiple web applications that will share a common web server. We&amp;rsquo;ll cover the following steps:
Creating a web app. Creating multiple web apps and &amp;ldquo;sharing&amp;rdquo; the first web app&amp;rsquo;s service plan and Application Insights instances. How to use F#&amp;lsquo;s list comprehensions to rapidly create multiple websites. Full code available here
Creating a single web app Create a standard web app as normal:</description></item><item><title>Serverless ETL</title><link>https://compositionalit.github.io/farmer/tutorials/serverless-etl/</link><pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/tutorials/serverless-etl/</guid><description>Introduction This tutorial shows how to create the infrastructure required to implement a common pattern for code-first &amp;ldquo;extract-transform-load&amp;rdquo; (ETL) processes. In this tutorial, imagine you wish to react to data being created in a blob in Storage, then parse it, and finally insert the &amp;ldquo;parsed&amp;rdquo; data into SQL in a relational database for use by e.g. a web application. We&amp;rsquo;ll cover the following steps:
Creating an Azure Functions instance, with automatically configured storage and app insights instances.</description></item><item><title>Web App Secrets with KeyVault</title><link>https://compositionalit.github.io/farmer/tutorials/web-storage-keyvault/</link><pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/tutorials/web-storage-keyvault/</guid><description>Introduction This tutorial shows how to create the infrastructure required to host a web app which can retrieve secrets from a secure store (Keyvault) using Azure identity. In this tutorial, we&amp;rsquo;ll store the key for a storage account in Keyvault, but it could be anything. We&amp;rsquo;ll cover the following steps:
Creating a Web App, Storage Account and a KeyVault instance. Safely add the Storage Account key into KeyVault. Granting a read-only trust between KeyVault and the Web App.</description></item></channel></rss>