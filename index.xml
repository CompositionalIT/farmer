<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Farmer</title><link>https://compositionalit.github.io/farmer/</link><description>Recent content on Farmer</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Tue, 04 Feb 2020 00:36:21 +0100</lastBuildDate><atom:link href="https://compositionalit.github.io/farmer/index.xml" rel="self" type="application/rss+xml"/><item><title>B2C Tenant</title><link>https://compositionalit.github.io/farmer/api-overview/resources/b2c-tenant/</link><pubDate>Thu, 01 Feb 2024 00:00:00 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/b2c-tenant/</guid><description>Overview Creates a new B2C tenant, please note that the current implementation only supports the creation of a new B2C tenant.
Usage of this computation expression when a B2C tenant already exists will result in an error, check the example for more infos.
B2C Tenant Builder Keywords Applies To Keyword Purpose B2C Tenant initial_domain_name Initial domain name for the B2C tenant as in initial_domain_name.</description></item><item><title>App Insights - Action Group</title><link>https://compositionalit.github.io/farmer/api-overview/resources/action-group/</link><pubDate>Tue, 08 Aug 2023 13:00:00 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/action-group/</guid><description>Overview The Action Group builder is used to create Action Groups. Action Groups are collections of notification preferences that any Alert can be associated with.
Application Insights Action Groups (Microsoft.Insights/actionGroups) Action Group Builder Keywords The Action Group builder (actionGroup) constructs Action Groups.
Keyword Purpose name Sets the name of Action Group. short_name Sets the short name of the Action Group.</description></item><item><title>Application Gateway</title><link>https://compositionalit.github.io/farmer/api-overview/resources/application-gateway/</link><pubDate>Sat, 23 Oct 2021 10:47:02 -0500</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/application-gateway/</guid><description>Overview The Application Gateway builder is used to create Application Gateways.
Application Gateways (Microsoft.Network/applicationGateways) Application Gateway Builder Keywords The Application Gateway builder (appGateway) constructs Application Gateways.
Keyword Purpose name Sets the name of the Application Gateway. sku_capacity Sets the capacity for this SKU of Application Gateway. add_identity Assigns a managed identity to the Application Gateway. add_ip_configs Assigns one or more gateway IP configuration for the subnet where it should be created.</description></item><item><title>App Insights - Alerts</title><link>https://compositionalit.github.io/farmer/api-overview/resources/alert/</link><pubDate>Fri, 20 Aug 2021 07:00:00 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/alert/</guid><description>Overview Azure Application Insights allows you to monitor your application and send you alerts when it is either unavailable, experiencing failures, or suffering from performance issues.
Application Insights Metric Alerts (Microsoft.Insights/metricAlerts) Builder Keywords Keyword Purpose name Sets the name of Alert. description Sets the description of the alert. frequency How often the metric alert is evaluated window The period of time that is used to monitor alert activity based on the threshold.</description></item><item><title>App Insights - Availability Tests</title><link>https://compositionalit.github.io/farmer/api-overview/resources/availability-tests/</link><pubDate>Fri, 06 Aug 2021 07:00:00 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/availability-tests/</guid><description>Overview The App Insights - Availability Tests builder is used to create Application Insights Availability Tests. You will need an Application Insights instance to run the tests. The tests can be just pinging the website and expecting response code of 200, or they can be recored Visual Studio WebTests as custom XML strings.
Application Insights (Microsoft.Insights/webtests) Builder Keywords Keyword Purpose name Sets the name of this Webtest instance.</description></item><item><title>Azure Firewall</title><link>https://compositionalit.github.io/farmer/api-overview/resources/azure-firewall/</link><pubDate>Wed, 07 Jul 2021 11:22:17 -0500</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/azure-firewall/</guid><description>Overview The Azure Firewall builder (azureFirewall) is used to create Azure Firewall instances.
Azure Firewall (Microsoft.Network/azureFirewalls) Builder Keywords Resource Keyword Purpose azureFirewall name Sets the name of the azure firewall azureFirewall sku Sets the name and tier of the azure firewall sku azureFirewall link_to_unmanaged_firewall_policy Configure the azure firewall to use an existing firewall policy azureFirewall link_to_firewall_policy Configure the azure firewall to use a firewall policy deployed by Farmer azureFirewall link_to_unmanaged_vhub Specify the existing virtual hub to which the azure firewall belongs azureFirewall link_to_vhub Specify the virtual hub deployed by farmer to which the azure firewall belongs azureFirewall public_ip_reservation_count Specify the number of Public IP addresses associated with the azure firewall azureFirewall depends_on Specify resources deployed by farmer the azure firewall depends on Example open Farmer open Farmer.</description></item><item><title>AKS Cluster</title><link>https://compositionalit.github.io/farmer/api-overview/resources/aks-cluster/</link><pubDate>Wed, 16 Sep 2020 19:30:59 +0200</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/aks-cluster/</guid><description>Overview The AKS Cluster builder is used to create AKS clusters.
Container Service (Microsoft.ContainerService/managedClusters) AKS Builder Keywords The AKS builder (aks) constructs AKS clusters.
Keyword Purpose name Sets the name of the AKS cluster. dns_prefix Sets the DNS prefix of the AKS cluster. enable_private_cluster Restricts the cluster&amp;rsquo;s Kubernetes API to only be accessible from private networks. enable_rbac Enable Kubernetes Role-Based Access Control.</description></item><item><title>Generating templates</title><link>https://compositionalit.github.io/farmer/api-overview/template-generation/</link><pubDate>Wed, 05 Feb 2020 09:13:36 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/template-generation/</guid><description>Farmer supports several ways to &amp;ldquo;output&amp;rdquo; ARM templates.
Generating JSON as a string You can generate an ARM template as a plain string:
let json = deployment.Template |&amp;gt; Writer.toJson // prints out the JSON printfn &amp;#34;%s&amp;#34; json Writing to a file You can write out the ARM template directly to a file, from which you can then deploy to Azure using whichever mechanism you already use e.g. Azure CLI, Powershell, REST API etc.</description></item><item><title>App Insights</title><link>https://compositionalit.github.io/farmer/api-overview/resources/app-insights/</link><pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/app-insights/</guid><description>Overview The App Insights builder is used to create Application Insights accounts. Use this if you need a standalone AI instance; if you need one for a web app, the web app will create one by default and configure the application settings automatically.
Application Insights (Microsoft.Insights/components) This builder supports both &amp;ldquo;Classic&amp;rdquo; (standalone) and &amp;ldquo;Workspace Enabled&amp;rdquo; (Log Analytics-backed) instances of App Insights. See the log_analytics_workspace keyword to see how to create the latter type of instance.</description></item><item><title>Your first Farmer template</title><link>https://compositionalit.github.io/farmer/quickstarts/quickstart-1/</link><pubDate>Tue, 04 Feb 2020 00:41:51 +0100</pubDate><guid>https://compositionalit.github.io/farmer/quickstarts/quickstart-1/</guid><description>Introduction In this exercise, you&amp;rsquo;ll:
create a web application with a fully-configured Application Insights instance create an ARM deployment object and assign the web app to it generate an ARM template Creating a Farmer app Create an F# console application using the .NET SDK and add the Farmer package in an empty directory:
dotnet new console -lang F# dotnet add package Farmer Farmer also has a .NET template to get started even more quickly!</description></item><item><title>1. The Farmer Pipeline</title><link>https://compositionalit.github.io/farmer/contributing/adding-resources/1-the-farmer-pipline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/contributing/adding-resources/1-the-farmer-pipline/</guid><description>This step will get you up and running by incorporating something quickly and easily into the Farmer pipeline that emits a valid Azure Container Registry.
Step 1.1: Prototype and test using an fsx file Technically this step is not necessary but it is the quickest way to get a working deployment from which you can iterate upon.
Start by looking at the sample azuredeploy.json file from the Azure Container Registry with Geo-replication Azure quickstart template and identifying the section of JSON that relates to the resource we want - in our case, the Microsoft.</description></item><item><title>ARM Basics</title><link>https://compositionalit.github.io/farmer/contributing/arm-basics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/contributing/arm-basics/</guid><description>Skip this section if you are already familiar with ARM Templates
This won&amp;rsquo;t be an introduction to Azure Resource Manager or ARM templates. Instead let&amp;rsquo;s go through the main parts that are important for creating a new resource.
The main parts of ARM Templates can be broken into resources, outputs, variables, and parameters. Farmer has limited support for parameters and no support for variables, so we will not cover them.</description></item><item><title>Bing Search</title><link>https://compositionalit.github.io/farmer/api-overview/resources/bing-search/</link><pubDate>Fri, 29 Jan 2021 07:33:46 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/bing-search/</guid><description>Overview The Bing Search builder is used to create Azure Bing Search instances.
Bing Search (Microsoft.Bing/accounts, kind: Bing.Search.v7) Builder Keywords Keyword Purpose name Sets the name of the Bing Search instance. sku Sets the SKU of the instance. Defaults to F1 (free). statistics Sets the statisticsEnabled property of the instance. Defaults to false Configuration Members Member Purpose Key Gets the ARM expression path to the Key of this Bing Search instance.</description></item><item><title>Bastion Host</title><link>https://compositionalit.github.io/farmer/api-overview/resources/bastion-host/</link><pubDate>Wed, 26 Aug 2020 17:55:00 -0400</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/bastion-host/</guid><description>Overview The Bastion Host builder creates a bastion host to access resources inside a virtual network. It also creates a static public IP for the bastion host.
BastionHosts (Microsoft.Network/bastionHosts) Builder Keywords Applies To Keyword Purpose bastion vnet Name of the virtual network the bastion host can access. bastion link_to_vnet Link to an existing virtual network (no dependsOn emitted. bastion scale_units Number of scale units when more connections are needed.</description></item><item><title>Outputs and ARM Expressions</title><link>https://compositionalit.github.io/farmer/contributing/outputs-and-expressions/</link><pubDate>Fri, 19 Jun 2020 23:50:54 +0200</pubDate><guid>https://compositionalit.github.io/farmer/contributing/outputs-and-expressions/</guid><description>Outputs can be created in Farmer for any ARM Expression, Resource Name or any optional string. ARM Expressions are most useful in this case for referring to values that only exist at deployment time, such as connection strings.
Creating ARM Expressions Farmer ARM expressions are in reality just wrapped strings, and are easy to create. For example, the code to create a Storage Key property is similar to this:</description></item><item><title>ARM Expressions</title><link>https://compositionalit.github.io/farmer/api-overview/expressions/</link><pubDate>Wed, 05 Feb 2020 09:13:36 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/expressions/</guid><description>ARM template expressions are a way of safely storing string values which contain expressions that are evaluated at deployment time by the Azure. ARM expressions can also contain a set of predefined functions supported by the ARM runtime. They can be passed back as outputs and used further downstream
Farmer understands how to use ARM expressions and provides functionality to correctly wrap and unwrap them as raw strings into a JSON template.</description></item><item><title>Parameters and Variables</title><link>https://compositionalit.github.io/farmer/api-overview/parameters/</link><pubDate>Wed, 05 Feb 2020 09:13:36 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/parameters/</guid><description>ARM templates support the idea both of parameterisation of templates and of the use of variables within a template for e.g. placeholders and re-using values.
Farmer, by design, has only limited support for parameters and no support for variables. We don&amp;rsquo;t plan on adding rich support for either of these for the following reasons:
We want to keep the Farmer codebase simple for maintainers We want to keep the Farmer API simple for users We want to keep the generated ARM templates as readable as possible We feel that instead of trying to embed conditional logic and program flow directly inside ARM templates in JSON, if you wish to parameterise your template that you should use a real programming language to do that: in this case, F#.</description></item><item><title>Working with multiple resources</title><link>https://compositionalit.github.io/farmer/quickstarts/quickstart-2/</link><pubDate>Tue, 04 Feb 2020 00:41:51 +0100</pubDate><guid>https://compositionalit.github.io/farmer/quickstarts/quickstart-2/</guid><description>Introduction In this quickstart, you&amp;rsquo;ll expand on the deployment authored in the previous quickstart as follows:
add an Azure storage account add an application setting to the web app that references the storage account&amp;rsquo;s key set a dependency between the two resources Creating a storage account Create a storage account by using the storageAccount builder.
let myStorage = storageAccount { name &amp;#34;yourfirststorage&amp;#34; } Azure Storage Account names must be globally unique and between 3-24 alphanumeric lower-case characters!</description></item><item><title>2. The IArmResource</title><link>https://compositionalit.github.io/farmer/contributing/adding-resources/2-iarm-resource/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/contributing/adding-resources/2-iarm-resource/</guid><description>In this exercise, we&amp;rsquo;ll migrate our code from the previous step directly into the Farmer codebase.
Step 2.1: Migrating to IArmResource Now that you know that your resource model produces the correct Json value when passed into Farmer, we can now create a proper type that contains the &amp;ldquo;parameterised&amp;rdquo; parts of the above function, such as name, sku and adminUserEnabled, and properly takes part in the Farmer pipeline, by implementing the IArmResource interface.</description></item><item><title>Basic Types</title><link>https://compositionalit.github.io/farmer/api-overview/basic-types/</link><pubDate>Wed, 25 May 2022 13:32:12 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/basic-types/</guid><description>Farmer often uses references to link resouces, when this is not possible, Farmer uses certain types to define links.
ResourceName A ResourceName represents a name of an ARM resource.
ResourceName &amp;#34;myapp&amp;#34; ResourceId A ResourceId identifies an ARM resource.
This is used when you want to link unmanaged resources to a deployment or have multiple deployment parts.
A ResourceId can be created with the resourceId member of a ResourceType:
let subnet = Arm.</description></item><item><title>Container Apps</title><link>https://compositionalit.github.io/farmer/api-overview/resources/container-apps/</link><pubDate>Thu, 09 Dec 2021 21:31:14 -0500</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/container-apps/</guid><description>Overview The Container Apps builder is used to create Azure Container Apps.
Container Environment (Microsoft.Web/kubeEnvironments) Container App (Microsoft.Web/containerApps) Turn on Resource Provider Before you deploy your container app, you need to turn on the Container Apps resource provider in your Azure subscription.
Get sure you have the following providers registered: Microsoft.Kubernetes and Microsoft.ContainerService.
Container Environment Builder The Container Environment builder (containerEnvironment) defines settings for the Kubernetes envirionment that hosts the container apps.</description></item><item><title>Communication Services</title><link>https://compositionalit.github.io/farmer/api-overview/resources/communication-services/</link><pubDate>Wed, 28 Apr 2021 23:33:46 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/communication-services/</guid><description>Overview The Communication Services builder is used to create Azure Communication Services instances.
Communication Services (Microsoft.Communication/communicationServices) Builder Keywords Keyword Purpose name Sets the name of the Communication Services instance. data_location Sets the dataLocation property of the instance. Defaults to United States Configuration Members Member Purpose Key Gets the ARM expression path to the Key of this Communication Services instance.</description></item><item><title>Dependencies</title><link>https://compositionalit.github.io/farmer/api-overview/dependencies/</link><pubDate>Sat, 22 Aug 2020 09:13:36 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/dependencies/</guid><description>ARM resources can depend on one another, and Farmer caters for this as well. Dependencies guarantee that when resources are created, Azure will provision them in the correct order so that e.g. a storage account is created before Azure tries to grab the storage account key / connection string for your web app setting.
Much of this work is done for you:
Farmer creates multiple resources for you at the builder level, and will ensure that the appropriate dependencies are set for you - for example, when creating a SQL Azure instance, Farmer will automatically ensure that the database depends on the server.</description></item><item><title>Outputs</title><link>https://compositionalit.github.io/farmer/api-overview/outputs/</link><pubDate>Sat, 22 Aug 2020 09:13:36 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/outputs/</guid><description>ARM templates also support the notion of outputs. Outputs can be used to provide your Farmer applications with values which were generated during the deployment process, to be used further downstream.
For example, you may wish to prime an Azure storage account with data post-creation. In this case, one way is to return back out the connection string of the storage account and use that to connect and upload your data.</description></item><item><title>Container Group</title><link>https://compositionalit.github.io/farmer/api-overview/resources/container-group/</link><pubDate>Thu, 30 Apr 2020 19:30:59 +0200</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/container-group/</guid><description>Overview The Container Group builder is used to create Azure Container Group instances.
Container Group (Microsoft.ContainerInstance/containerGroups) Network Profile (Microsoft.Network/networkProfiles) Container Group Builder The Container Group builder (containerGroup) defines a Container Group.
Keyword Purpose name Sets the name of the container group. add_instances Adds container instances to the group. operating_system Sets the OS type (default Linux). restart_policy Sets the restart policy (default Always) public_dns Sets the DNS host label when using a public IP.</description></item><item><title>Container Registry</title><link>https://compositionalit.github.io/farmer/api-overview/resources/container-registry/</link><pubDate>Thu, 30 Apr 2020 19:10:46 +0200</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/container-registry/</guid><description>Overview The Container Registry builder is used to create Azure Container Registry (ACR) instances.
Container Registry (Microsoft.ContainerRegistry/registries) Builder Keywords Keyword Purpose name Sets the name of the Container Registry instance. sku Sets the SKU of the instance. Defaults to Basic. enable_admin_user The value that indicates whether the admin user is enabled. Configuration Members Member Purpose Password Gets the ARM expression path to the first admin password of this container registry if admin user was enabled.</description></item><item><title>Cognitive Services</title><link>https://compositionalit.github.io/farmer/api-overview/resources/cognitive-services/</link><pubDate>Fri, 10 Apr 2020 08:53:46 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/cognitive-services/</guid><description>Overview The Cognitive Services builder is used to create Azure Cognitive Services instances.
Cognitive Services (Microsoft.CognitiveServices/accounts) Builder Keywords Keyword Purpose name Sets the name of the Cognitive Services instance. sku Sets the SKU of the instance. Defaults to F0 (free). api Specifies the Kind of api to use for the service instance. Defaults to AllInOne. Configuration Members Member Purpose Key Gets the ARM expression path to the Key of this Cognitive Services instance.</description></item><item><title>Cosmos DB</title><link>https://compositionalit.github.io/farmer/api-overview/resources/cosmos-db/</link><pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/cosmos-db/</guid><description>Overview The CosmosDb package containers two builders, used to create databases and containers.
CosmosDB Account (Microsoft.DocumentDb/databaseAccounts) CosmosDB SQL (Microsoft.DocumentDB/databaseAccounts/sqlDatabases) CosmosDB MongoDB (Microsoft.DocumentDB/databaseAccounts/mongodbDatabases) CosmosDB SQL Container (Microsoft.DocumentDb/databaseAccounts/sqlDatabases/containers) There is currently only support for document databases (the so-called &amp;ldquo;SQL API&amp;rdquo;), with support for Gremlin, Table and Cassandra data models planned.
Cosmos DB Builder The CosmosDB builder abstracts the idea of account and database into one. If you wish to &amp;ldquo;re-use&amp;rdquo; an already-created Cosmos DB account, use link_to_account keyword - no account will be created and the database will be attached to the existing one.</description></item><item><title>Deploying to Azure</title><link>https://compositionalit.github.io/farmer/quickstarts/quickstart-3/</link><pubDate>Tue, 04 Feb 2020 00:41:51 +0100</pubDate><guid>https://compositionalit.github.io/farmer/quickstarts/quickstart-3/</guid><description>Introduction In this exercise, you&amp;rsquo;ll update the application to deploy the generated ARM template to Azure directly from Farmer.
Farmer generates normal ARM templates. You use all of the standard mechanisms for deploying ARM templates such as through the portal, Powershell, .NET or Azure CLI etc. This tutorial shows you a simple way to deploy templates from your development machine directly from within F#.
Install the Azure CLI If you haven&amp;rsquo;t done so already, install the Azure CLI on your machine.</description></item><item><title>3. The IBuilder interface</title><link>https://compositionalit.github.io/farmer/contributing/adding-resources/3-ibuilder/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/contributing/adding-resources/3-ibuilder/</guid><description>Sometimes, ARM resources are captured at a level of abstraction that is too low for us to reason about. In such cases, we may wish to use the IBuilder interface. An IBuilder is not only even easier to consume by users than the F# record we looked at in the previous exercise, but can create multiple IArmResource objects at once. This is especially useful for more complex resources that tend to come in groups of two or three together - for example, Server Farm and Web Apps, or Cosmos DB Accounts, Databases and Containers.</description></item><item><title>CDN</title><link>https://compositionalit.github.io/farmer/api-overview/resources/cdn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/cdn/</guid><description>Overview The CDN builder is used to create Azure Content Delivery Network instances.
CDN Profile (Microsoft.Cdn/profiles) CDN Endpoint (Microsoft.Cdn/profiles/endpoints) CDN Custom Domain (Microsoft.Cdn/profiles/endpoints/customDomains) There are three builders available:
The CDN builder, which maps to a CDN profile. The Endpoint builder, which creates endpoints and custom domains. Endpoints are created within a CDN. The CDN Rule builder, which creates CDN rules with conditions and actions that can be added to an endpoint CDN Builder Keywords Keyword Purpose name Sets the name of the CDN instance.</description></item><item><title>DNS Resolver</title><link>https://compositionalit.github.io/farmer/api-overview/resources/dns-resolver/</link><pubDate>Mon, 13 Mar 2023 09:59:10 -0500</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/dns-resolver/</guid><description>Overview The DNS resolver resource provides a DNS endpoint for resources that have IP connectivity to a virtual network but aren&amp;rsquo;t directly attached to it such as VPN or ExpressRoute clients. It also provides outbound DNS resolution to enable resources in the virtual network to resolve DNS using external DNS servers, such as an on-premise DNS.
DNS Resolver (Microsoft.Network/dnsResolvers) DNS Resolver Inbound Endpoint (Microsoft.Network/dnsResolvers/inboundEndpoints) DNS Resolver Outbound Endpoint (Microsoft.Network/dnsResolvers/outboundEndpoints) DNS Forwarding Ruleset (Microsoft.</description></item><item><title>Dashboard</title><link>https://compositionalit.github.io/farmer/api-overview/resources/dashboard/</link><pubDate>Fri, 13 Aug 2021 07:00:46 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/dashboard/</guid><description>Overview Dashboards are a focused and organized view of your cloud resources in the Azure portal. Use dashboards as a workspace where you can monitor resources and quickly launch tasks for day-to-day operations.
Microsoft.Portal dashboards (Microsoft.Portal/dashboards) Builder Keywords Keyword Purpose name Sets the name of the dashboard. title Sets the visible title of the dashboard. Default: Same as name metadata Sets the metadata for the dashboard.</description></item><item><title>Databricks Workspace</title><link>https://compositionalit.github.io/farmer/api-overview/resources/databricks-workspace/</link><pubDate>Sun, 31 Jan 2021 15:43:30 +0000</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/databricks-workspace/</guid><description>Overview The Databricks Workspace builder is used to create Azure Databricks Workspaces.
Workspace (Microsoft.Databricks/workspaces) Builder Keywords Keyword Purpose name Sets the name of the workspace. sku Sets the pricing tier of the workspace. Defaults to Standard Tier. encrypt_with_key_vault Given a key vault builder / resourceid / vault name, and the name of a key, activates the use of Key Vault for the key store.</description></item><item><title>Deployment Script</title><link>https://compositionalit.github.io/farmer/api-overview/resources/deployment-script/</link><pubDate>Thu, 22 Oct 2020 15:19:14 -0400</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/deployment-script/</guid><description>Overview The Deployment Script builder is used to execute Azure CLI scripts as part of an ARM deployment.
Deployment Script (Microsoft.Resources/deploymentScripts) Builder Keywords Keyword Purpose name Sets the name of the deployment script resource. arguments List of arguments to pass to the script. cleanup_on_success The script will only be cleaned up on success to allow for inspection of failures.</description></item><item><title>DNS Zone</title><link>https://compositionalit.github.io/farmer/api-overview/resources/dns/</link><pubDate>Mon, 14 Sep 2020 18:53:46 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/dns/</guid><description>Overview The DNS Zone module contains two types of builders - dnsZone, used to create DNS Zones, and ___Record (like cnameRecord, aRecord, ..), used to create DNS Records sets. It supports most record types (except CAA) and has specific builders for every record type.
DNS Zone (Microsoft.Network/dnsZones) A Record (Microsoft.Network/dnsZones/A) AAAA Record (Microsoft.Network/dnsZones/AAAA) CNAME Record (Microsoft.Network/dnsZones/CNAME) TXT Record (Microsoft.Network/dnsZones/TXT) MX Record (Microsoft.Network/dnsZones/MX) NS Record (Microsoft.Network/dnsZones/NS) PTR Record (Microsoft.Network/dnsZones/PTR) SOA Record (Microsoft.</description></item><item><title>Data Lake</title><link>https://compositionalit.github.io/farmer/api-overview/resources/data-lake/</link><pubDate>Thu, 11 Jun 2020 00:55:30 +0200</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/data-lake/</guid><description>Overview The Data Lake builder is used to create Azure Data Lake instances.
Data Lake (Microsoft.DataLakeStore/accounts) Builder Keywords Keyword Purpose name Sets the name of the Cognitive Services instance. sku Sets the SKU of the instance. Defaults to Consumption. enable_encryption Turns on data lake encryption. Example open Farmer open Farmer.Builders let myLake = dataLake { name &amp;#34;myDataLake&amp;#34; sku DataLake.</description></item><item><title>The Farmer .NET Template</title><link>https://compositionalit.github.io/farmer/quickstarts/template/</link><pubDate>Tue, 04 Feb 2020 00:41:51 +0100</pubDate><guid>https://compositionalit.github.io/farmer/quickstarts/template/</guid><description>Farmer comes with a .NET template that makes getting started easy.
Creating a basic Farmer app The easiest way to create a Farmer app is to use the Farmer .NET Template.
dotnet new -i Farmer.Template dotnet new Farmer You only have to install the template once on your machine!
This creates a new dotnet application solution and project that looks by default as follows:
open Farmer open Farmer.Builders let deployment = arm { location Location.</description></item><item><title> Diagnostic Settings</title><link>https://compositionalit.github.io/farmer/api-overview/resources/diagnosticsetting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/diagnosticsetting/</guid><description>Overview The Diagnostic Settings builder is used to create diagnostic settings instances to send platform logs and metrics to different destinations (storage, event hub and log analytics). Support for Farmer builders and external resources is supported.
Diagnostic Settings (providers/diagnosticSettings) Builder Keywords Keyword Purpose name Sets the name of the Diagnostic Settings resource. metrics_source The resource that will be used for the source of logging and metrics information.</description></item><item><title>4. Providing Builder syntax</title><link>https://compositionalit.github.io/farmer/contributing/adding-resources/4-creating-builder-syntax/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/contributing/adding-resources/4-creating-builder-syntax/</guid><description>If you want to get the nice json-like syntax for your configuration record, you need to implement a separate class which contains a set of methods that act on the Configuration Record that you created previously - one for each keyword that you want.
If you need have not built your own computation expression before, here are some background resources for you:
Office microsoft docs The &amp;ldquo;Computation Expressions&amp;rdquo; series Workshop Step 4.</description></item><item><title>Dedicated Hosts</title><link>https://compositionalit.github.io/farmer/api-overview/resources/dedicated-hosts/</link><pubDate>Mon, 10 Oct 2022 22:26:00 -0400</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/dedicated-hosts/</guid><description>Overview The hostGroup and host builders create dedicated hosts in azure and their parent resource, a host group, to efficiently manage a physical host resource in Azure. Dedicated hosts are the same physical servers used in our data centers, provided as a resource. To learn more about dedicated hosts, reference the Azure Docs
Host Group (Microsoft.Compute/hostGroups) Host (Microsoft.Compute/hostGroups/hosts) Builder Keywords Applies To Keyword Purpose hostGroup name Name of the host group resource hostGroup add_availability_zone Assign a zone to the host group.</description></item><item><title>Route Tables</title><link>https://compositionalit.github.io/farmer/api-overview/resources/route-tables/</link><pubDate>Thu, 08 Sep 2022 22:26:00 -0400</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/route-tables/</guid><description>Overview The routeTable builder creates a route table to efficiently change default routing traffic between Azure subnets, virtual networks, and on-premises networks. To learn more about routeTables, reference the Azure Docs
RouteTable (Microsoft.Network/routeTables) Route (Microsoft.Network/routeTables/routes) Builder Keywords Applies To Keyword Purpose routeTable name Name of the NAT Gateway resource routeTable disableBgpRoutePropagation Whether to disable the routes learned by BGP on that route table routeTable add_routes The routes to be added to this route table route name Name of the route resource route addressPrefix The destination CIDR to which the route applies route nextHopType The type of Azure hop the packet should be sent to route nextHopIpAddress The IP address packets should be forwarded to.</description></item><item><title>NAT Gateway</title><link>https://compositionalit.github.io/farmer/api-overview/resources/nat-gateway/</link><pubDate>Tue, 02 Aug 2022 22:26:00 -0400</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/nat-gateway/</guid><description>Overview The natGateway builder creates a NAT Gateway to efficiently manage the SNAT traffic used by resources in a virtual network. By default, it creates a single static public IP for the NAT Gateway, but more IP addresses or prefixes of groups of addresses can be specified.
NatGateway (Microsoft.Network/natGateways) Builder Keywords Applies To Keyword Purpose natGateway name Name of the NAT Gateway resource natGateway idle_timeout Timeout after which connections that have seen no traffic will be disconnected to free SNAT ports.</description></item><item><title>Traditional Enterprise Application to the Azure Cloud, managed via Farmer</title><link>https://compositionalit.github.io/farmer/tutorials/traditional-ea/</link><pubDate>Fri, 03 Sep 2021 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/tutorials/traditional-ea/</guid><description>Introduction This tutorial shows how to create the basic infrastructure of an enterprise application (for example, migrating old on-premises application to cloud) and then how to build the supporting services for that.
A traditional enterprise application has database and a server. Farmer supportrs both Microsoft SQL Server and PostgreSQL. This tutorial uses Microsoft version. For the server, we use a Virtual Machine (VM) which is basically your server in the cloud.</description></item><item><title>Deploy an ASP.NET app</title><link>https://compositionalit.github.io/farmer/tutorials/webapp-deploy/</link><pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/tutorials/webapp-deploy/</guid><description>Introduction This tutorial shows how to create the infrastructure required to host a ASP.NET web app, and how to automatically deploy that application with Farmer. We&amp;rsquo;ll cover the following steps:
Creating and configuring a basic ASP.NET web application. Creating a web app in Farmer. Deploying the web app through Farmer. Full code available here
Note: Your web application can be a C# web application - it does not need to be written in F#!</description></item><item><title>Event Grid</title><link>https://compositionalit.github.io/farmer/api-overview/resources/event-grid/</link><pubDate>Mon, 06 Jul 2020 20:00:00 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/event-grid/</guid><description>Overview The Event Grid is a simple but powerful builder that links events from Azure services such as Storage and App Service to one or many subscribers which can consume the events. The event grid builder supports a degree of type safety - all system events are provided from a strongly-typed list, and events are directly linked to specific builders - so, for example, you cannot accidentally subscribe to Storage Account events if the event publisher is a Web App.</description></item><item><title>ExpressRoute</title><link>https://compositionalit.github.io/farmer/api-overview/resources/express-route/</link><pubDate>Sun, 07 Jun 2020 21:57:00 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/express-route/</guid><description>Overview An ExpressRoute circuit is a dedicated link to Azure to provide communication with Azure services without traversing the Internet. It requires some coordination with a networking provider for these circuits, so some information, such as the service provider and peering location must be obtained from Azure reference documentation. The ExpressRoute builder creates an ExpressRoute circuit and enables Azure private peering and Microsoft peering.
ExpressRoute Namespace (Microsoft.Network/expressRouteCircuits) ExpressRoute Builder (expressRoute) Keyword Purpose service_provider Connectivity service provider from Azure reference documentation peering_location Connectivity peering location from Azure reference documentation tier Standard or Premium family Metered or Unlimited data bandwidth Bandwidth in Mbps for the circuit add_authorizations Adds names of authorization keys to be created on the new circuit.</description></item><item><title>Event Hub</title><link>https://compositionalit.github.io/farmer/api-overview/resources/event-hub/</link><pubDate>Sun, 23 Feb 2020 20:00:00 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/event-hub/</guid><description>Overview The Event Hub builder creates event hub namespaces, event hubs, consumer groups and authorization rules in a single builder.
Event Hub Namespace (Microsoft.EventHub/namespaces) Event Hub (Microsoft.EventHub/namespaces/eventhubs) Consumer Group (Microsoft.EventHub/namespaces/eventhubs/consumergroups) Authorization Rule (Microsoft.EventHub/namespaces/eventhubs/AuthorizationRules&amp;quot;) The Event Hub builder works in a similar fashion to the web app builder in that it automatically creates the host (in this case, the event hub namespace) when creating the event hub. If you wish to create multiple hubs in the same namespace, configure the namespace-level properties in the first event hub; subsequent event hubs should link to the namespace of the hub created by the first hub.</description></item><item><title>5. Unit Testing</title><link>https://compositionalit.github.io/farmer/contributing/adding-resources/5-unit-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/contributing/adding-resources/5-unit-testing/</guid><description>Usually I would be pro writing the tests before you implement all this but it is important to get a feel for the moving parts. At this point you may want to write some tests so you can iterate quickly on getting the structure of your ARM template correct.
The tests you will find in the project are black-box style tests that focus on the input of a resource and the output of the ARM template.</description></item><item><title>Creating Pull Requests</title><link>https://compositionalit.github.io/farmer/contributing/create-pull-requests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/contributing/create-pull-requests/</guid><description>This article is not a detailed guide on how to create a pull request (PR). See here to learn more about how to work with pull requests on GitHub.
The purpose of this article is to illustrate the main checklists you must go through before a PR will be considered for inclusion in Farmer. If you are new to Farmer, F# or GitHub - don&amp;rsquo;t worry. The team will be happy to support you getting your feature over the line.</description></item><item><title>Network Interface</title><link>https://compositionalit.github.io/farmer/api-overview/resources/network-interface/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/network-interface/</guid><description>Overview The networkInterface builder allows you to create network interfaces (NIC) so that Azure virtual machine (VM) can communicate with internet, Azure, and on-premises resources. To learn more about routeServer, reference to Azure Docs
NetworkInterface (Microsoft.Network/networkInterfaces) Builder Keywords Applies To Keyword Purpose networkInterface name Name of the network interface resource networkInterface link_to_subnet Link to existing subnet. If not provided, need to specify the subnet name and prefix for a new subnet networkInterface subnet_name Sets the name of the vnet subnet for network interface networkInterface subnet_prefix Sets the prefix of the vnet subnet for network interface networkInterface link_to_vnet Link to existing vnet or to vnet managed by Farmer networkInterface add_static_ip Use static ip for the network interface.</description></item><item><title>Route Server</title><link>https://compositionalit.github.io/farmer/api-overview/resources/route-server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/route-server/</guid><description>Overview The routeServer builder creates a route server to simplify dynamic routing between your network virtual appliance (NVA) and your virtual network. To learn more about routeServer, reference the Azure Docs
RouteServer (Microsoft.Network/virtualHubs) BGPConnection (Microsoft.Network/virtualHubs/bgpConnections) Builder Keywords Applies To Keyword Purpose routeServer name Name of the route server resource routeServer sku Sets the tier of the route server routeServer allow_branch_to_branch_traffic The allowBranchToBranchTraffic flag for the route server.</description></item><item><title>Functions</title><link>https://compositionalit.github.io/farmer/api-overview/resources/functions/</link><pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/functions/</guid><description>Overview The Functions builder is used to create Azure Functions accounts. It abstracts the App Host and Service Plan into the same component, and will also create and configure a linked App Insights resource. In addition, it will automatically create a backing storage account required by the functions runtime.
Web Site (Microsoft.Web/sites) Web Host (Microsoft.Web/serverfarms) Application Insights (Microsoft.Insights/components) Storage Accounts (Microsoft.Storage/storageAccounts) Builder Keywords Keyword Purpose name Sets the name of the functions instance.</description></item><item><title>IOT Hub</title><link>https://compositionalit.github.io/farmer/api-overview/resources/iot-hub/</link><pubDate>Tue, 19 May 2020 23:14:14 +0200</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/iot-hub/</guid><description>Overview The IOT Hub builder creates IOT Hub and linked Provision Services.
IOT Hubs (Microsoft.Devices/IotHubs) Provisioning Services (Microsoft.Devices/provisioningServices) Builder Keywords Keyword Purpose name Specifies the name of the IOT Hub sku Sets the SKU of the IOT Hub capacity Sets the name of the capacity for the IOT Hub instance partition_count Sets the name of the SKU/Tier for the IOT Hub instance retention_days Sets the name of the SKU/Tier for the IOT Hub instance enable_device_provisioning Sets the name of the SKU/Tier for the IOT Hub instance Configuration Members Member Purpose GetKey Returns an ARM expression to retrieve the IOT Hub key for a specific policy e.</description></item><item><title>Gallery</title><link>https://compositionalit.github.io/farmer/api-overview/resources/gallery/</link><pubDate>Mon, 20 Feb 2023 10:20:00 -0400</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/gallery/</guid><description>Overview The gallery builder is used to create Galleries for sharing VM images. These can be used to create virtual machines or virtual machine scale sets that can expand or contract to scale capacity as needed.
Galleries (Microsoft.Compute/galleries) Gallery Image (Microsoft.Compute/galleries/images) Builder Keywords Applies To Keyword Purpose gallery name Name of the gallery resource, up to 80 characters, alphanumerics and periods. gallery description Description for the gallery.</description></item><item><title>Image Template</title><link>https://compositionalit.github.io/farmer/api-overview/resources/image-template/</link><pubDate>Sun, 19 Feb 2023 10:20:00 -0400</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/image-template/</guid><description>Overview The Image Template builder is used to create Image Templates for generating VM images. An image template starts with a source image, runs several customizations, and then can finally distribute the image to one or more destinations, including an Azure Image Gallery, a managed image, or a VHD file.
Image Templates (Microsoft.VirtualMachineImages/imageTemplates) Builder Keywords Applies To Keyword Purpose imageTemplate name Sets the name of the App Insights instance.</description></item><item><title>Key Vault</title><link>https://compositionalit.github.io/farmer/api-overview/resources/keyvault/</link><pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/keyvault/</guid><description>Overview The KeyVault package contains four builders, for the different components used by KeyVault: One for access policies, one for secrets, one for the overall keyvault container, and one for adding access policies to an existing key vault.
Keys (Microsoft.KeyVault/vaults/keys) KeyVault (Microsoft.KeyVault/vaults) Secrets (Microsoft.KeyVault/vaults/secrets) AccessPolicies (Microsoft.KeyVault/vaults/accessPolicies) Key Builder The key builder allows you to generate RSA and elliptical curve keys in the key vault.
Keyword Purpose name Sets the name of the key to generate.</description></item><item><title>Private Endpoint</title><link>https://compositionalit.github.io/farmer/api-overview/resources/private-endpoint/</link><pubDate>Fri, 05 Aug 2022 16:13:00 -0400</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/private-endpoint/</guid><description>Overview The Private Endpoint builder (privateEndpoint) creates a private endpoint for accessing Azure resources or a private link service without traversing the Internet.
Private Endpoint (Microsoft.Network/privateEndpoints) Builder Keywords Applies To Keyword Purpose privateEndpoint name Specifies the name of the private endpoint. privateEndpoint subnet_reference Attaches the private endpoint to a referenced subnet. privateEndpoint link_to_subnet Attaches the private endpoint to a subnet deployed in the same deployment.</description></item><item><title>Private Link Service</title><link>https://compositionalit.github.io/farmer/api-overview/resources/private-link-service/</link><pubDate>Thu, 16 Jun 2022 17:40:05 -0400</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/private-link-service/</guid><description>Overview The Private Link Service builder (privateLink) creates a private link service to access resources behind a load balancer privately from a private endpoint instead of traversing the internet.
Private Link Services (Microsoft.Network/privateLinkServices) Builder Keywords Applies To Keyword Purpose privateLink name Specifies the name of the private link service privateLink depends_on Specify any dependencies that must be deployed before this.</description></item><item><title>Logic Apps</title><link>https://compositionalit.github.io/farmer/api-overview/resources/logic-apps/</link><pubDate>Wed, 27 Apr 2022 00:55:30 +0200</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/logic-apps/</guid><description>Overview The Logic App builder is used to create Azure Logic App Workflows.
Workflows (Microsoft.Logic/workflows) Builder keywords Keyword Purpose name Sets the name of the workflow. definition Sets the file path (via FileDefinition path) or the definition directly (via ValueDefinition value) add_tags Adds tags to the script runtime resource. add_tag Adds a tag to the script runtime resource.</description></item><item><title>Load Balancer</title><link>https://compositionalit.github.io/farmer/api-overview/resources/load-balancer/</link><pubDate>Thu, 20 May 2021 13:04:00 -0400</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/load-balancer/</guid><description>Overview The Load Balancer builder (loadBalancer) creates load balancers that can distribute load amongst healthy services in a backend pool on public or private networks.
Load balancers (Microsoft.Network/loadBalancers) Load balancer frontend IP configurations (Microsoft.Network/loadBalancers/frontendIPConfigurations) Load balancer backend address pools (Microsoft.Network/loadBalancers/backendAddressPools) Load balancer health probes (Microsoft.Network/loadBalancers/probes) Builder Keywords Applies To Keyword Purpose loadBalancer name Specifies the name of the load balancer loadBalancer sku Specifies the SKU of the load balancer - default is &amp;lsquo;Basic&amp;rsquo;.</description></item><item><title>Log Analytics</title><link>https://compositionalit.github.io/farmer/api-overview/resources/loganalytics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/loganalytics/</guid><description>Overview The Log Analytics builder is used to create Work space instances.
Log Analytics (Microsoft.OperationalInsights/workspaces) Builder Keywords Keyword Purpose name Sets the name of the log analytics instance. retention_period Sets the retention period for logs in days. enable_ingestion Enables ingestion network traffic. enable_query Enables query network traffic. daily_cap Specifies an upper limit on the amount of data to ingest daily.</description></item><item><title>Managed Identity</title><link>https://compositionalit.github.io/farmer/api-overview/resources/managed-identity/</link><pubDate>Sun, 11 Oct 2020 19:10:03 -0400</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/managed-identity/</guid><description>Overview Managed Identity is used to create an identity that resources can run under automatically. This is similar to a service principal except that there is no credential to manage and the authorization token is retrieved through a secure internal handshake between the resource and the identity service in Azure.
User Assigned Identity (Microsoft.ManagedIdentity/userAssignedIdentities) Federated Identity Credential (Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials) Using a managed identity as opposed to e.g. connection strings brings several benefits:</description></item><item><title>Maps</title><link>https://compositionalit.github.io/farmer/api-overview/resources/maps/</link><pubDate>Tue, 26 May 2020 11:24:00 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/maps/</guid><description>Overview The Maps builder creates Azure Maps accounts.
Maps (Microsoft.Maps/accounts) Builder Keywords Keyword Purpose name Sets the name of the Azure Maps account. sku Sets the sku of the Azure Maps account. Example open Farmer open Farmer.Builders let myMaps = maps { name &amp;#34;mymaps&amp;#34; sku Maps.S0 }</description></item><item><title>Network Security Group</title><link>https://compositionalit.github.io/farmer/api-overview/resources/nsg/</link><pubDate>Sun, 19 Jul 2020 16:44:00 -0400</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/nsg/</guid><description>Overview The Network Security Group builder creates network security groups with rules for securing network access to resources.
Network Security Groups (Microsoft.Network/networkSecurityGroups) Security Rules (Microsoft.Network/networkSecurityGroups/securityRules) Application Security Groups (Microsoft.Network/networkSecurityGroups) Builder Keywords Applies To Keyword Purpose nsg name Specifies the name of the network security group nsg add_rules Adds security rules to the network security group nsg initial_rule_priority The priority of the first rule, after which each rule gets an incrementally higher value.</description></item><item><title>Operations Management</title><link>https://compositionalit.github.io/farmer/api-overview/resources/operations-management/</link><pubDate>Fri, 29 Apr 2022 09:40:00 -0400</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/operations-management/</guid><description>Overview The Operations Management builder is used to create Solutions for a Log Analytics Workspace.
Builder Keywords Builder Keyword Purpose omsPlan name The name of the plan, which can match the name of the overall Solution. omsPlan publisher The publisher of the solution, usually &amp;ldquo;Microsoft&amp;rdquo; (the default value). omsPlan product The specific solution being created, such as OMGSGallery/SecurityInsights. omsProperties workspace The Log Analytics workspace this solution uses.</description></item><item><title>PostgreSQL</title><link>https://compositionalit.github.io/farmer/api-overview/resources/postgresql/</link><pubDate>Fri, 22 May 2020 07:14:00 +0200</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/postgresql/</guid><description>Overview The PostgreSQL module contains two builders - postgreSQL, used to create PostgreSQL Azure servers, and postgreSQLDb, used to create individual databases. It supports features such as firewall, autogrow and version selection. Every PostgreSQL Azure server you create will automatically create a SecureString parameter for the admin account password.
PostgreSQL server (Microsoft.DBforPostgreSQL/servers) PostgreSQL Builder keywords Applies To Keyword Purpose Server name (string) Sets the name of the PostgreSQL server.</description></item><item><title>Redis Cache</title><link>https://compositionalit.github.io/farmer/api-overview/resources/redis/</link><pubDate>Sun, 23 Feb 2020 20:00:00 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/redis/</guid><description>Overview The Redis builder creates managed Redis Cache accounts.
Redis (Microsoft.Cache/redis) Builder Keywords Keyword Purpose name Sets the name of the Redis cache instance. sku Sets the sku of the Redis cache instance. capacity Sets the capacity level of the Redis cache instance, should be between 1-6 - see here. enable_non_ssl_port Enabled access to the cache over the non-SSL port.</description></item><item><title>Resource Group</title><link>https://compositionalit.github.io/farmer/api-overview/resources/resource-group/</link><pubDate>Thu, 05 Aug 2021 17:30:25 -0400</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/resource-group/</guid><description>Overview The Resource Group builder is always the top-level element of your deployment. It contains the manifest of all Farmer resources that you create.
Builder Keywords Keyword Purpose location Sets the default location of all resources. add_resource Adds a resource to the template. add_resources Adds a collection of resources to the template. add_arm_resources Adds a collection of lower-level IArmResources to the template.</description></item><item><title>SignalR</title><link>https://compositionalit.github.io/farmer/api-overview/resources/signalr/</link><pubDate>Mon, 01 Jun 2020 11:13:00 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/signalr/</guid><description>Overview The SignalR builder creates SignalR services.
SignalR Service (Microsoft.SignalRService/signalR) Builder Keywords Keyword Purpose name Sets the name of the SignalR service. sku Sets the sku of the SignalR service. capacity Sets the capacity of the SignalR service. (optional) service_mode Sets the service mode of the SignalR service. (optional) allowed_origins Sets the allowed origins of the SignalR service.</description></item><item><title>Search</title><link>https://compositionalit.github.io/farmer/api-overview/resources/search/</link><pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/search/</guid><description>Overview The Search builder creates storage accounts and their associated containers.
Search (Microsoft.Search/searchServices) Builder Keywords Keyword Purpose name Sets the name of the Azure Search instance. sku Sets the sku of the Azure Search instance. replicas Sets the replica count of the Azure Search instance. partitions Sets the number of partitions of the Azure Search instance.</description></item><item><title>Service Bus</title><link>https://compositionalit.github.io/farmer/api-overview/resources/service-bus/</link><pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/service-bus/</guid><description>Overview The Service Bus builder creates service bus namespaces and their associated queues.
Service Bus Namespaces (Microsoft.ServiceBus/namespaces) Builder Keywords Applies To Keyword Purpose Queue name The name of the queue. Queue lock_duration_minutes The length of time that a lock can be held on a message. Queue max_delivery_count The maximum number of times a message can be delivered before dead lettering.</description></item><item><title>SQL Azure</title><link>https://compositionalit.github.io/farmer/api-overview/resources/sql/</link><pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/sql/</guid><description>Overview The SQL Azure module contains two builders - sqlServer, used to create SQL Azure servers, and sqlDb, used to create individual databases. It supports features such as encryption, firewalls and automatic pool creation. Every SQL Azure server you create will automatically create a SecureString parameter for the admin account password.
SQL Azure server (Microsoft.Sql/servers) SQL Server Builder Keywords Keyword Purpose name Sets the name of the SQL server.</description></item><item><title>Static Web Apps</title><link>https://compositionalit.github.io/farmer/api-overview/resources/static-web-app/</link><pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/static-web-app/</guid><description>Overview The Static Web App builder is used to create Static Web Apps. The Static Web App service is modern web app service that offers streamlined full-stack development from source code to global high availability. You can use it to host static web applications and Azure Functions in a single resource, using GitHub native workflows to build and deploy your application.
Static Site (Microsoft.Web/staticSites) At the time of writing, Static Web Apps are in public preview.</description></item><item><title>Storage Account</title><link>https://compositionalit.github.io/farmer/api-overview/resources/storage-account/</link><pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/storage-account/</guid><description>Overview The Storage Account builder creates storage accounts and their associated containers.
Storage Accounts (Microsoft.Storage/storageAccounts) Storage Containers (blobServices/containers) File Shares (fileServices/shares) Queues (Microsoft.Storage/storageAccounts/queueServices/queues) Tables (Microsoft.Storage/storageAccounts/tableServices/tables) Builder Keywords Keyword Purpose name Specifies the name of the storage account sku Sets the SKU of the storage account. A set of predefined SKU values are available as members in Storage.Sku, but you can create the full range of combinations of Kind and SKU as needed.</description></item><item><title>Traffic Manager</title><link>https://compositionalit.github.io/farmer/api-overview/resources/traffic-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/traffic-manager/</guid><description>Overview The Traffic Manager builder (trafficManager) creates traffic manager profiles and their associated endpoints.
Traffic Manager Profiles (Microsoft.Network/trafficManagerProfiles) Traffic Manager Azure Endpoints (Microsoft.Network/trafficManagerProfiles/azureEndpoints) Traffic Manager External Endpoints (Microsoft.Network/trafficManagerProfiles/externalEndpoints) Builder Keywords Builder Keyword Purpose trafficManager name Sets the name of the Traffic Manager profile. trafficManager dns_ttl Sets the DNS TTL of the Traffic Manager profile, in seconds (default 30). trafficManager disable_profile Disables the Traffic Manager profile.</description></item><item><title>Virtual Machine</title><link>https://compositionalit.github.io/farmer/api-overview/resources/virtual-machine/</link><pubDate>Thu, 17 Mar 2022 09:33:27 +0500</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/virtual-machine/</guid><description>Overview The Virtual Machine builder creates a fully configured virtual machine and all its required child resources.
Virtual Machines (Microsoft.Compute/virtualMachines) Virtual Networks (Microsoft.Network/virtualNetworks) IP Addresses (Microsoft.Network/publicIPAddresses) Network Interfaces (Microsoft.Network/networkInterfaces) Storage Accounts (Microsoft.Storage/storageAccounts) In addition, every VM you create will add a SecureString parameter to the ARM template, whose name follows the pattern password-for-[virtual machine name].
Builder Keywords Keyword Purpose name Sets the name of the VM.</description></item><item><title>Virtual Hub</title><link>https://compositionalit.github.io/farmer/api-overview/resources/virtual-hub/</link><pubDate>Wed, 07 Jul 2021 08:53:46 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/virtual-hub/</guid><description>Overview The Virtual WAN builder (vhub) is used to create Azure Virtual Hub instances.
Virtual Hub (Microsoft.Network/virtualHubs) Builder Keywords Resource Keyword Purpose vhub name Sets the name of the virtual hub vhub sku Sets the sku of the virtual hub vhub address_prefix Sets the address prefix of the virtual hub vhub link_to_vwan Sets the virtual wan deployed by farmer to which the virtual hub belongs vhub link_to_unmanaged_vwan Sets the existing virtual wan to which the virtual hub belongs Example open Farmer open Farmer.</description></item><item><title>Virtual Network</title><link>https://compositionalit.github.io/farmer/api-overview/resources/vnet/</link><pubDate>Wed, 09 Jun 2021 10:31:36 -0500</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/vnet/</guid><description>Overview The virtual network builder is used to deploy virtual networks and their subnets.
Virtual Network (Microsoft.Network/virtualNetworks) Subnets (Microsoft.Network/virtualNetworks/subnets) The Virtual Network module contains four builders
The vnet builder is used to create Azure Virtual Network instances. The subnet builder is used within the vnet builder to define subnets. The addressSpace builder can be used to automatically generate subnets based on the sizes of networks needed within the address space.</description></item><item><title>Virtual WAN</title><link>https://compositionalit.github.io/farmer/api-overview/resources/virtual-wan/</link><pubDate>Mon, 03 May 2021 11:22:17 -0500</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/virtual-wan/</guid><description>Overview The Virtual WAN builder (vwan) is used to create Azure Virtual WAN instances.
Virtual WAN (Microsoft.Network/virtualWans) Builder Keywords Resource Keyword Purpose vwan name Sets the name of the virtual wan vwan standard_vwan Sets the virtual wan type to &amp;ldquo;standard&amp;rdquo; instead of the default &amp;ldquo;basic&amp;rdquo; vwan allow_branch_to_branch_traffic Specifies branch to branch traffic is allowed vwan disable_vpn_encryption Specifies Vpn encryption is disabled vwan office_365_local_breakout_category Sets the office local breakout category Example open Farmer open Farmer.</description></item><item><title>Virtual Network Gateway</title><link>https://compositionalit.github.io/farmer/api-overview/resources/vnet-gateway/</link><pubDate>Fri, 19 Jun 2020 10:40:00 -0400</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/vnet-gateway/</guid><description>Overview The Virtual Network Gateway builder creates virtual network gateways for ExpressRoute or VPN connections to a virtual network.
Virtual Network Gateways (Microsoft.Network/virtualNetworkGatways) Connections (Microsoft.Network/connections) Builder Keywords Applies To Keyword Purpose Gateway name Specifies the name of the virtual network gateway Gateway vnet The name of the virtual network to which the gateway connects Gateway er_gateway_sku SKU for an ExpressRoute gateway Gateway vpn_gateway_sku SKU for a VPN gateway Gateway vpn_type Sets the VPN type to route-based (default) or policy-based.</description></item><item><title>Virtual Machine Scale Set</title><link>https://compositionalit.github.io/farmer/api-overview/resources/vm-scale-set/</link><pubDate>Sun, 05 Nov 2023 21:10:14 -0500</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/vm-scale-set/</guid><description>Overview The Virtual Machine Scale Set builder (vmss) creates a virtual machine scale set that can grow and shrink it&amp;rsquo;s capacity by creating virtual machines and their dependent resources from a common profile.
Virtual Machine Scale Sets (Microsoft.Compute/virtualMachineScaleSets) Builder Keywords Builder Keyword Purpose vmss name Sets the name of the VM scale set. vmss vm_profile Defines a profile for VM&amp;rsquo;s in the scale set using the vm builder to support all the same functionality as a single VM.</description></item><item><title>Disk</title><link>https://compositionalit.github.io/farmer/api-overview/resources/disk/</link><pubDate>Thu, 16 Feb 2023 09:19:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/disk/</guid><description>Overview The disk builder creates managed disks that may be attached to a virtual machine. With managed disks, the storage account backing the disk is handled by Azure. Disks can be created as empty disks or by importing a virtual hard disk from an existing storage account.
Disks (Microsoft.Compute/disks) Builder Keywords Keyword Purpose name Sets the name of the managed disk. sku Sets the type of disk, such as Standard_LRS, StandardSSD_LRS, Premium_LRS, or UltraSSD_LRS.</description></item><item><title>Web App</title><link>https://compositionalit.github.io/farmer/api-overview/resources/web-app/</link><pubDate>Tue, 05 Apr 2022 11:05:00 -0400</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/web-app/</guid><description>Overview The Web App builder is used to create Azure App Service accounts. It abstracts the Service Plan into the same component, and will also create and configure a linked App Insights resource. If you wish to create a website that connects to an existing service plan or Web App, use the link_to_service_plan keyword and provide the resource name of the service plan or Web App to connect to.
Web Site (Microsoft.</description></item><item><title>Autoscale Settings</title><link>https://compositionalit.github.io/farmer/api-overview/resources/autoscale-settings/</link><pubDate>Thu, 07 Dec 2023 16:46:00 -0400</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/autoscale-settings/</guid><description>Overview The Autoscale Setting builder is used to create Autoscale settings to control how the Azure Monitor Autoscale can increase and decrease the capacity of some resources, such as Virtual Machine Scale Sets.
Autoscale Notification Email Builder (autoscaleNotificationEmail) Autoscale Webhook Builder (autoscaleWebhook) Autoscale Notification Builder (autoscaleNotification) Autoscale Capacity Builder (autoscaleCapacity) Autoscale Schedule Builder (autoscaleSchedule) Autoscale Dimension Builder (autoscaleDimension) Autoscale Scale Action Builder (scaleAction) Autoscale Recurrence Builder (recurrence) Autoscale Predictive Autoscale Policy Builder (predictiveAutoscalePolicy) Autoscale Fixed Date Builder (fixedDate) Autoscale Metric Trigger Builder (autoscaleMetricTrigger) Autoscale Rule Builder (autoscaleRule) Autoscale Profile Builder (autoscaleProfile) Autoscale Settings Properties Builder (autoscaleSettingsProperties) Autoscale Settings Builder (autoscaleSettings) - builds Microsoft.</description></item><item><title>Custom Output with ARM Expressions</title><link>https://compositionalit.github.io/farmer/tutorials/custom-output/</link><pubDate>Fri, 23 Apr 2021 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/tutorials/custom-output/</guid><description>Introduction Many resources have properties that are only set once the resource is created, such as a public IP&amp;rsquo;s address or an ExpressRoute&amp;rsquo;s circuit service key. It is often helpful to have these as output from the deployment so they are available to any downstream automation tasks.
In this tutorial, you will deploy an ExpressRoute circuit, create a reference to the serviceKey property on the newly deployed circuit, and provide that as the ARM deployment output.</description></item><item><title>Declarative Steps in an ARM Deployment</title><link>https://compositionalit.github.io/farmer/tutorials/keyvault-certs/</link><pubDate>Thu, 25 Feb 2021 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/tutorials/keyvault-certs/</guid><description>Introduction An ARM deployment typically represents the infrastructure you want deployed as a result of it, referred to as the &amp;ldquo;goal state&amp;rdquo;. For instance, you may want to have a web application with a database, so you&amp;rsquo;ll define your goal state that includes database and web application resources. However, it&amp;rsquo;s not always that simple - there are various reasons that some of the steps of a deployment cannot be represented by the goal state resource model.</description></item><item><title>Create your own Minecraft Server</title><link>https://compositionalit.github.io/farmer/tutorials/minecraft-server-aci/</link><pubDate>Sat, 13 Feb 2021 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/tutorials/minecraft-server-aci/</guid><description>Introduction In this tutorial, you&amp;rsquo;ll use dotnet framework features and F# language techniques when building a template to create a fully functional Minecraft Server running on an Azure Container Instance with its world data stored in an Azure Storage Account. Because Farmer is a domain specific language embedded within F#, you are able to utilize the rich dotnet ecosystem and a static type system to &amp;ldquo;craft&amp;rdquo; an advanced deployment.
Programmatically build our Minecraft configuration files.</description></item><item><title>F# Script in a Container Group</title><link>https://compositionalit.github.io/farmer/tutorials/aci-fsx/</link><pubDate>Wed, 10 Feb 2021 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/tutorials/aci-fsx/</guid><description>Introduction In this tutorial, you will deploy an F# script directly to an Azure Container Group. This is useful when you need to fill a gap in your solution with some quick application logic or to test scenarios on Azure before building a more complex application. We&amp;rsquo;ll cover the following steps:
Create a brief F# script. Create a container instance. Include the script on a volume that will be attached to the container when started.</description></item><item><title>Cosmos-backed Web App</title><link>https://compositionalit.github.io/farmer/tutorials/cosmos-backed-webapp/</link><pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/tutorials/cosmos-backed-webapp/</guid><description>Introduction This tutorial walks you through creating a web application which is backed by a Cosmos DB database, and is fully configured with connection string settings for you to start developing against. We&amp;rsquo;ll cover the following steps:
Creating a Cosmos DB account with a single database. Creating a web application with an automatically configured app insights instance. Configuring the web application to have the connection settings required to connect to the Cosmos DB instance.</description></item><item><title>Multiple web apps</title><link>https://compositionalit.github.io/farmer/tutorials/multiple-web-apps/</link><pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/tutorials/multiple-web-apps/</guid><description>Introduction This tutorial walks you through creating multiple web applications that will share a common web server. We&amp;rsquo;ll cover the following steps:
Creating a web app. Creating multiple web apps and &amp;ldquo;sharing&amp;rdquo; the first web app&amp;rsquo;s service plan and Application Insights instances. How to use F#&amp;lsquo;s list comprehensions to rapidly creating multiple websites. Full code available here
Creating a single web app Create a standard web app as normal:</description></item><item><title>Serverless ETL</title><link>https://compositionalit.github.io/farmer/tutorials/serverless-etl/</link><pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/tutorials/serverless-etl/</guid><description>Introduction This tutorial shows how to create the infrastructure required to implement a common pattern for code-first &amp;ldquo;extract-transform-load&amp;rdquo; (ETL) processes. In this tutorial, imagine you wish to react to data being created in a blob in Storage, then parse it, and finally insert the &amp;ldquo;parsed&amp;rdquo; data into SQL in a relational database for use by e.g. a web application. We&amp;rsquo;ll cover the following steps:
Creating an Azure Functions instance, with automatically configured storage and app insights instances.</description></item><item><title>Web App Secrets with KeyVault</title><link>https://compositionalit.github.io/farmer/tutorials/web-storage-keyvault/</link><pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/tutorials/web-storage-keyvault/</guid><description>Introduction This tutorial shows how to create the infrastructure required to host a web app which can retrieve secrets from a secure store (Keyvault) using Azure identity. In this tutorial, we&amp;rsquo;ll store the key for a storage account in Keyvault, but it could be anything. We&amp;rsquo;ll cover the following steps:
Creating a Web App, Storage Account and a KeyVault instance. Safely adding the Storage Account key into KeyVault. Granting a read-only trust between KeyVault and the Web App.</description></item></channel></rss>